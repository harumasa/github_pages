[{"id":0,"href":"/github_pages/20220716_log_en_install_wsl_2.html","title":"[Unfinished] How to install WSL 2 (Windows Subsystem for Linux 2) on Windows 11","section":"harumasa.txt","content":" Introduction # Model: DELL Inspiron 14 (5485) OS: Windows 11 Visual Studio Code PwerShell 7 Windows Terminal WSL 2 Docker Engine PowerShell 7 # PowerShell Documentation\nWindows Terminal # What is Windows Terminal?\n1. Settings # 1.1. Startup # Default profile: PowerShell (PowerShell 7) Default terminal application: Windows Terminal Append to JSON file.\nRicty Diminished\n+++ \u0026#34;defaults\u0026#34;: { \u0026#34;font\u0026#34;: { \u0026#34;face\u0026#34;: \u0026#34;Ricty Diminished\u0026#34;, \u0026#34;size\u0026#34;: 18 }, \u0026#34;opacity\u0026#34;: 80, \u0026#34;useAcrylic\u0026#34;: false }, +++ Visual Studio Code # Visual Studio Code\nInstall Visual Studio Code from Microsoft Store\n1. Accounts # Setting Sync is On Installed Extensions\nDocker GitHub Theme GlassIt-VSC Jupyter Jupyter Keymap Jupyter Notebook Renderers markdownlint Marp for VS Code Material Icon Theme Path Intellisense Prettier - Code formatter Pylance Python Remote - Containers Remote - SSH Remote - WSL Remote Development Trailing Spaces YAML WSL 2 (Windows Subsystem for Linux 2) # Windows Subsystem for Linux Documentation\n# wsl --install -d Debian # exit (or ctrl + D) # wsl -l -v # debian # cat /etc/os-release # sudo apt update # sudo apt upgrade # sudo dpkg-reconfigure locales ja_JP.UTF-8 # sudo dpkg-reconfigure tzdata Asia/Tokyo Docker # Install Docker Engine on Debian\n"},{"id":1,"href":"/github_pages/20200829_log_en_install_archlinux.html","title":"How to install Arch Linux","section":"harumasa.txt","content":" Introduction # Model: DELL Inspiron 14 (5485) OS: Arch Linux Installation guide # The official installation guide\n1. Pre-installation # 1.1 Acquire an installation image # Arch Linux Downloads\n1.2. Verify signature # # gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig 1.3. Prepare an installation medium # # dd bs=4M if=path/to/archlinux-version-x86_64.iso of=/dev/sdx conv=fsync oflag=direct status=progress 1.4. Boot the live environment # Set BIOS configuration: Press F2\nFast Boot: Thorough (Disabled) Secure Boot: Disabled Boot from the USB flash drive: Press F12\n1.5. Set the console keyboard layout # # loadkeys jp106 1.6. Verify the boot mode # # ls /sys/firmware/efi/efivars 1.7. Connect to the Internet # # iwctl [iwd]# device list [iwd]# station ${DEVICENAME} scan [iwd]# station ${DEVICENAME} get-networks [iwd]# station ${DEVICENAME} connect SSID [iwd]# exit # ping archlinux.org 1.8. Update the system clock # # timedatectl set-ntp true # timedatectl status 1.9. Partition the disks # Identify devices\n# fdisk -l Example layout (UEFI with GPT)\nMount point: Partition: Partition type: Size: /mnt/boot /dev/nvme0n1p1 EFI system partition 512 MB /mnt /dev/nvme0n1p2 Linux filesystem Remainder of the device Create partitions\n# cgdisk /dev/nvme0n1 1. 512MB EFI partition # Hex code ef00 2. 100% size partiton # Hex code 8300 Encrypting devices\n# cryptsetup luksFormat /dev/nvme0n1p2 # cryptsetup open --type luks /dev/nvme0n1p2 cryptroot Create encrypted partitions\n# pvcreate /dev/mapper/cryptroot # vgcreate vg0 /dev/mapper/cryptroot # lvcreate -l +100%FREE vg0 -n root 1.10. Format the partitions # # mkfs.fat -F 32 /dev/nvme0n1p1 # mkfs.ext4 /dev/mapper/vg0-root 1.11. Mount the file systems # # mount /dev/mapper/vg0-root /mnt # mkdir /mnt/boot # mount /dev/nvme0n1p1 /mnt/boot # lsblk /dev/nvme0n1 2. Installation # 2.1. Select the mirrors # # nano /etc/pacman.d/mirrorlist Pacman Mirrorlist Generator\n2.2. Install essential packages # # pacstrap /mnt base base-devel linux linux-firmware nano 3. Configure the system # 3.1. Fstab # # genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 3.2. Chroot # # arch-chroot /mnt 3.3. Time zone # # ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime # hwclock --systohc --utc 3.4 Localization # Uncomment locales\n# nano /etc/locale.gen Uncomment line en_US.UTF-8 UTF-8 Uncomment line ja_JP.UTF-8 UTF-8 Generate locales\n# locale-gen Set the language and keyboard layout\n# echo LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf # echo KEYMAP=jp106 \u0026gt; /etc/vconsole.conf 3.5. Network configuration # Set the hostname\n# echo ${MYHOSTNAME} \u0026gt; /etc/hostname Add matching entries\n# nano /etc/hosts 127.0.0.1 localhost ::1 localhost 127.0.1.1 ${MYHOSTNAME} Setup NetworkManager\n# pacman -S networkmanager dhcpcd # systemctl enable NetworkManager 3.6. Initramfs # Modify mkinitcpio.conf\n# nano /etc/mkinitcpio.conf Add \u0026#39;ext4\u0026#39; to MODULES Add \u0026#39;encrypt\u0026#39; and \u0026#39;lvm2\u0026#39; to HOOKS before \u0026#39;filesystems\u0026#39; Recreate the initramfs image\n# pacman -S lvm2 # mkinitcpio -p 3.7. Root password # # passwd 3.8. Boot loader # Install systemd-boot\n# bootctl install Setup systemd-boot\n# nano /boot/loader/loader.conf default arch.conf timeout 4 console-mode max editor no Adding loaders\n# nano /boot/loader/entries/arch.conf title Arch Linux linux /vmlinuz-linux initrd /amd-ucode.img initrd /initramfs-linux.img Setup Microcode\n# pacman -S amd-ucode 4. Reboot # # exit # umount -R /mnt # reboot 5. Post-installation # Login with root account\nSetup NetworkManager\n# nmtui General recommendations # 1. System administration # 1.1. Users and groups # Login with root account\n# useradd -m -g users -G wheel ${USERNAME} # passwd ${USERNAME} To allow members of group wheel sudo access\n# EDITOR=nano visudo Uncommment line %wheel ALL=(ALL) ALL Uncommment line %wheel ALL=(ALL) NOPASSWD: ALL Return to regular user\n# exit 2. Package management # 2.1. pacman # Update all packages\n# sudo pacman -Syu 2.5. Arch User Repository # Setup paru (AUR Helper)\n# sudo pacman -S --needed base-devel # git clone https://aur.archlinux.org/paru.git # cd paru # makepkg -si Utilizing multiple cores on compression\n# sudo nano /etc/makepkg.conf Change line COMPRESSXZ=(xz -c -z --threads=0 -) Update all packages\n# paru 4. Graphical user interface # 4.1. Display server # # sudo pacman -S xorg-server xorg-apps # sudo localectl set-x11-keymap jp 4.2. Display drivers # # lspci | grep -e VGA -e 3D # sudo pacman -S xf86-video-amdgpu 4.3. Desktop environments # Setup Xfce\n# sudo pacman -S xfce4 xfce4-goodies Set the language\n# sudo nano /etc/locale.conf LANG=ja_JP.UTF-8 Reboot\n# reboot 4.5. Display manager # # sudo pacman -S lightdm lightdm-gtk-greeter # sudo systemctl enable lightdm.service 6. Multimedia # 6.1. Sound System # # sudo pacman -S pipewire 8. Input Devices # 8.3. Laptop touchpads # # sudo pacman -S xf86-input-libinput 11. Appearance # 11.1. Fonts # # sudo pacman -S noto-fonts-cjk 12. Console improvements # 12.3. Alternative shells # Setup Zsh\n# sudo pacman -S zsh # chsh -s $(which zsh) 12.5. Colored output # # sudo nano /etc/pacman.conf Uncommment line Color 91. Localization/Japanese # 91.4 Input methods # Setup Fcitx and Mozc\n# sudo pacman -S fcitx fcitx-mozc fcitx-im fcitx-configtool Set environment variables for IM modules\n# nano ~/.xprofile export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx # reboot 92. Settings # Settings \u0026gt; Appearance \u0026gt; Fonts\nDefault Font Noto Sans CJK JP Regular, 9pt Default Monospace Font Noto Sans Mono CJK JP Regular, 9pt Settings \u0026gt; FcitxConfiguration \u0026gt; Input Method\nAdd Mozc 99. etc # # paru -S hyper-git # paru -S prezto-git # paru -S visual-studio-code-bin # sudo pacman -S docker # sudo systemctl enable docker # sudo pacman -S git "},{"id":2,"href":"/github_pages/20200829_log_jp_githubpages.html","title":"Hugo + GitHub Pages でブログを作成する","section":"harumasa.txt","content":" はじめに # Model: MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports) OS: macOS Catalina 10.15.6 Hugo 0.74.3 ターミナルから以下の手順でブログ記事を更新し GitHub Pages への公開までをシェルスクリプトで自動化します。\n# Hugo によって生成されたプロジェクトのルートディレクトリまで移動します。 cd ~/github_pages # 新規マークダウンファイルを作成し編集します。 hugo new github_pages.md # シェルスクリプトを実行します。 ./deploy.sh Hugo の設定 # 1. インストール # Hugo をインストールします。\nbrew install hugo Hugo プロジェクトを作成します。\nhugo new site github_pages 2. テーマのダウンロード # 公式サイト Hugo の Hugo テーマ一覧 からテーマを選び git clone します。\ncd ~/github_pages git clone https://github.com/rakuishi/hugo-zen.git themes/hugo-zen 3. 記事の作成 # github_pages.md を作成します。\ncd ~/github_pages/content hugo new github_pages.md github_pages.md を編集します。\nvim ~/github_pages/content/github_pages.md --- title: \u0026#34;TITLE\u0026#34; date: 2020-01-01T00:00:00+09:00 draft: false --- ## XXXXXXXX +++ 4. 設定ファイルの編集 # config.toml を編集します。\nvim ~/github_pages/config.toml author = \u0026#34;${AUTHOR}\u0026#34; baseURL = \u0026#34;https://${USERNAME}.github.io/github_pages/\u0026#34; copyright = \u0026#34;${USERNAME} All rights reserved.\u0026#34; languageCode = \u0026#34;ja\u0026#34; publishDir = \u0026#34;docs\u0026#34; # html 生成先を public から docs へ変更 theme = \u0026#34;hugo-zen\u0026#34; title = \u0026#34;${TITLE}\u0026#34; uglyurls = true [params] github = \u0026#34;https://github.com/${USERNAME}/\u0026#34; logo = \u0026#34;./images/logo.jpg\u0026#34; # ~/github_pages/themes/hugo-zen/static/images/logo.jpg 5. 公開用ファイルの作成 # 以下を実行するとブラウザで localhost:1313/github_pages からプレビューを確認することができます。\nhugo server --theme=hugo-zen --buildDrafts --watch --theme: プレビュー時にテーマを指定します --buildDrafts: draft: true となっている下書き状態のファイルもプレビューに表示します --watch: .md ファイルを更新する度にブラウザ側のプレビューも自動で更新されます 以下を実行すると ~/github_pages/docs に公開用ファイルが作成されます。\nhugo GitHub Pages の設定 # 1. リポジトリの作成 # GitHub 上で公開用リポジトリ github_pages を作成します。\ndocs の内容が https://${USERNAME}.github.io/github_pages/ にて公開されます。\n以下を実行します。\ncd ~/github_pages git init git add -A git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:${USERNAME}/github_pages.git git push -u origin master 2. GitHub での設定変更 # GitHub 上の Settings から GitHub Pages の source を master branch/docs folder へ変更します。\n3. シェルスクリプトの作成 # deploy.sh を編集します。\nvim ~/github_pages/deploy.sh #!/bin/bash LANG=C echo -e \u0026#34;\\033[0;33mDeploying updates to GitHub...\\033[0m\u0026#34; # Build the project hugo # Add changes to git git add -A # Commit changes msg=\u0026#34;commit `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos git push origin master シェルスクリプトを実行できるようにします。\nchmod +x deploy.sh 以下を実行することでリポジトリに push され，https://${USERNAME}.github.io/github_pages/ にてブログが表示されます。\n./deploy.sh "},{"id":3,"href":"/github_pages/20200829_log_en_setup_for_mac.html","title":"Setup for Mac (macOS Monterey, Homebrew, Hyper, Visual Studio Code, Docker, Git)","section":"harumasa.txt","content":" Introduction # Model: MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports) OS: macOS Monterey Homebrew Hyper Visual Studio Code Docker Desktop Git macOS Monterey # 1. System Preferences # 1.1. General # Click in the scroll bar to: Jump to the spot that\u0026rsquo;s clicked Prefer tabs: Turn on Ask to keep changes when closing documents 1.2. Desktop \u0026amp; Screen Saver # 1.2.2. Screen Saver # Turn off Show screen saver after 1.3. Dock \u0026amp; Menue Bar # 1.3.1. Dock \u0026amp; Menue Bar # Minimize windows using: Scale effect Turn on Double-click a window\u0026rsquo;s title bar to: minimize Turn on Minimize windows into application icon Turn on Automatically hide and show the Dock 1.3.14. Clock # Data options: Turn on Show the date of the week Time options: Turn on Display the time with seconds 1.3.16. Siri # Turn off Show Siri in menu bar 1.4. Mission Control # Turn off Automatically rearrange Spaces based on most recent use 1.7. Language \u0026amp; Region # Preferred languages: English - Primary, Japanese 1.13. Accessibility # 1.13.10. Pointer Control \u0026gt; Mouse \u0026amp; Trackpad # Trackpad Options Turn on Enable dragging: three finger drag 1.16. Security \u0026amp; Privacy # Advanced Turn on Require an administrator password to access system-wide preferences 1.16.1. General # Require password: immediately after sleep or screen saver begins Turn on Use your Apple Watch to unlock apps your Mac 1.16.3. Firewall # Turn on Firewall Firewall Options Turn off Automatically allow build-in software to receive incoming connections Turn on Enable stealth mode 1.17. Software Update # Turn on Automatically keep my Mac up to date 1.19. Bluetooth # Turn on Show Bluetooth in menu bar 1.22. Keyboard # 1.22.1. Keyboard # Key Repeat: Most Fast Delay Until Repeat: Most Short Modifier Keys Caps Lock Key: Command 1.22.2. Text # Turn off Correct spelling automatically Turn off Capitalize words automatically Turn off Add period with double-space Turn off Touch Bar typing suggestions Turn off Use smart quotes and dashes 1.22.3. Shortscuts # Keyboard Move focus to next window: option + tab 1.22.4. Input Sources # Japanese - Romaji \u0026ldquo;¥\u0026rdquo; key generates: \\ (Backslash) 1.22.5. Dictation # Dictation: On 1.23. Trackpad # 1.23.1. Point \u0026amp; Click # Tracking speed: Most Fast 1.23.3. More Gestures # Turn on App Expose 1.29. Sharing # Change Computer Name: ${COMPUTERNAME} 1.30. Time Machine # Turn on Back Up Automatically Turn on Show Time Machine in Menu bar 2. Desktop # Turn on Use Stacks 3. Finder # 3.1. Preferences # 3.1.1. General # New Finder windows show: ${USERNAME} 3.1.3. Sidebar # Show these items in the sidebar 3.1.4. Advanced # Turn on Show all filename extensions 3.4. View # as Columns Show Path Bar Show Status Bar 3.5. Go # AirDrop Allow me to be discovered by: No One 4. Safari # 4.1. Preferences # 4.1.1. General # Turn off Open \u0026ldquo;safe\u0026rdquo; files after downloading 4.1.10. Advanced # Turn on Show full website address Default encoding: Unicode (UTF-8) Turn on Show Develop menu in menu bar 4.4. View # Show Status Bar 5. FaceTime # 5.1. Preferences # 5.1.1 Settings # you can be reached for FaceTime at: 6. Messages # 6.1. Preferences # 6.1.2 iMessage # Turn on Enable Messages in iCloud you can be reached for messages at: Turn on Send read receipts 7. Terminal # 7.1. Preferences # 7.1.2. Profiles # Profiles Iceberg Text Background Color \u0026amp; Effects \u0026gt; Opacity: 80% Font \u0026gt; Ricty Diminished \u0026amp; Size 18pt Prezto # Prezto is the configuration framework for Zsh\nInstall Command Line Tools\n# xcode-select --install Check for Command Line Tools updates\n# git clone --recursive https://github.com/sorin-ionescu/prezto.git \u0026#34;${ZDOTDIR:-$HOME}/.zprezto\u0026#34; # setopt EXTENDED_GLOB # for rcfile in \u0026#34;${ZDOTDIR:-$HOME}\u0026#34;/.zprezto/runcoms/^README.md(.N); do # ln -s \u0026#34;$rcfile\u0026#34; \u0026#34;${ZDOTDIR:-$HOME}/.${rcfile:t}\u0026#34; # done # vim ~/.zpreztorc +++ zstyle \u0026#39;:prezto:load\u0026#39; pmodule \\ \u0026#39;environment\u0026#39; \\ \u0026#39;terminal\u0026#39; \\ \u0026#39;editor\u0026#39; \\ \u0026#39;history\u0026#39; \\ \u0026#39;directory\u0026#39; \\ \u0026#39;spectrum\u0026#39; \\ \u0026#39;utility\u0026#39; \\ \u0026#39;completion\u0026#39; \\ \u0026#39;autosuggestions\u0026#39; \\ # Add \u0026#39;git\u0026#39; \\ # Add \u0026#39;history-substring-search\u0026#39; \\ # Add \u0026#39;syntax-highlighting\u0026#39; \\ # Add \u0026#39;prompt\u0026#39; +++ # Auto set to \u0026#39;off\u0026#39; on dumb terminals. zstyle \u0026#39;:prezto:module:prompt\u0026#39; theme \u0026#39;pure\u0026#39; # sorin to pure +++ # source ~/.zpreztorc BetterSnapTool # Install BetterSnapTool from App Store\n1. Preferences # 1.1 General Settings # Turn on Start BetterSnapTool everytime your Mac starts up Turn off Show menubar icon (click twice on the app icon to open this preferences if hidden) 1.3. Keyboard Shortcuts # maximize: shift + command + F left half: shift + command + ← right half: shift + command + → top half: shift + command + ↑ bottom half: shift + command + ↓ Homebrew # Homebrew\n# /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; # brew cask install hyper # brew cask install visual-studio-code # brew cask install docker # brew install git Hyper # Hyper\n1. Preferences # +++ module.exports = { config: { +++ // default font size in pixels for all tabs fontSize: 18, # Change // font family with optional fallbacks fontFamily: \u0026#39;Ricty Diminished\u0026#39;, # Change +++ +++ // rest of the config # Add opacity: 0.80, # Add }, +++ +++ plugins: [ \u0026#34;hyper-material-theme\u0026#34;, # Add \u0026#34;hyper-opacity\u0026#34;, # Add ], +++ }; Visual Studio Code # Visual Studio Code\n1. Accounts # Setting Sync is On Installed Extensions\nDocker GitHub Theme GlassIt-VSC Jupyter Jupyter Keymap Jupyter Notebook Renderers markdownlint Marp for VS Code Material Icon Theme Path Intellisense Prettier - Code formatter Pylance Python Remote - Containers Remote - SSH Remote - WSL Remote Development Trailing Spaces YAML Docker Desktop # Docker\n1. Preferences # 1.4. Advanced # Memory: [$X]GB (Default: 2GB) 2. Directory Structure # 2.1. Directory Structure # . ├── .dockerignore ├── .gitignore ├── data/ # Data Files ├── docker-compose.yml ├── Dockerfile └── notebook/ # Jupyter Notebook Files 2.2. .dockerignore # data notebook 2.3. .gitignore # github/gitignore\n# Python +++ 2.5. docker-compose.yml # version: \u0026#34;3\u0026#34; services: jupyter: build: . command: jupyter notebook --allow-root --ip=0.0.0.0 --no-browser ports: - 8888:8888 volumes: - $PWD/notebook:/dev/work working_dir: /dev/work 2.6. Dockerfile # FROM jupyter/datascience-notebook:python-3.10.4 # Use specific version (:latest Use latest version) RUN pip install -U pip 3. Jupyter Notebook # Launch Jupyter Notebook\n# docker-compose up --build Check logs\n+++ jupyter_1 | To access the notebook, open this file in a browser: jupyter_1 | file:///home/jovyan/.local/share/jupyter/runtime/nbserver-6-open.html jupyter_1 | Or copy and paste one of these URLs: jupyter_1 | http://XXXXXXXXXXXX:8888/?token=XXXXXXXXXXXX jupyter_1 | or http://127.0.0.1:8888/?token=XXXXXXXXXXXX Git # Git\n1. Initial setting # # git config --global user.name ${USERNAME} # git config --global user.email ${USEREMAIL} # git config --global color.ui true # git config --global help.autocorrect 1 2. Global gitignore # # vim ~/.gitignore_global Copy and paste the contents of [github/gitignore](https://github.com/github/gitignore/ \u0026#34;github/gitignore\u0026#34;) Enable global gitignore\n# git config --global core.excludesfile ~/.gitignore_global 3. GitHub # GitHub\n3.1. Settings # Security Enable Two-factor authentication 3.2. Clone with HTTPS # Generate Personal Access Token\nSetting \u0026gt; Developer settings \u0026gt; Personal access tokens Generate new token \u0026gt; Turn on repo \u0026gt; Generate token Use Personal Access Token instead of password\n3.3. Clone with SSH # Generate SSH keys\nmkdir ~/.ssh cd ~/.ssh ssh-keygen -t rsa -C ${REGISTEREDMAIL} Enter enter Enter passphrase Enter same passphrase again Add connection settings to config\nvim ~/.ssh/config # global setting for macOS Host * AddKeysToAgent yes UseKeychain yes Host github HostName github.com IdentityFile ~/.ssh/id_rsa User git cd ~/.ssh chmod 600 id_rsa ssh-add ~/.ssh/id_rsa ssh-add -l pbcopy \u0026lt; ~/.ssh/id_rsa.pub Settings \u0026gt; SSH and GPG keys \u0026gt; New SSH key \u0026gt; Paste to Key \u0026gt; Add key ssh -T git@github.com ssh git@github.com etc # Reset Launchpad # defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock Anaconda # Anaconda Installing on macOS\n1. PATH # vim ~/.zprofile source ~/opt/anaconda3/etc/profile.d/conda.sh 2. Jupyter Notebook # vim ~/.jupyter/custom/custom.css .CodeMirror pre { font-family: Ricty Diminished; } "}]